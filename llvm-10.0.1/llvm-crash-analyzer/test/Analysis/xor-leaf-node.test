## From the following source code: (clang -g -O1 -S)
## int k = 0;
## int* g = &k;
## __attribute__((noinline))
## int set(int* p){
##   p = 0;
##   return foo(p);
## }
## __attribute__((optnone))
## int foo(int* p){
##   return *p;
## }
## __attribute__((optnone))
## int main(){
##   return set(g);
## }
## Compiled to asm and modified to perform fall-through call from set to foo.

# RUN: %llvm-crash-analyzer --core-file=%S/Inputs/core.xor-leaf-node \
# RUN:   %S/Inputs/xor-leaf-node.out --debug-only=taint-dfg < %s 2>&1 | FileCheck %s

# CHECK: === Taint Data Flow Graph ===
# CHECK: !3{1; MOV64mr $rsp, 1, $noreg, -8, $noreg, $rdi; REG: $rdi}
# CHECK-NEXT: !3{1; MOV64mr $rsp, 1, $noreg, -8, $noreg, $rdi; REG: $rdi}
# CHECK-NOT:  ***> !4{2; $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def $eflags; CONSTANT: $edi}
# CHECK-NOT:!4{2; $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def $eflags; CONSTANT: $edi}
# CHECK-NOT:  ---> !5{2; $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def $eflags; REG: $edi}
# CHECK-NEXT: ***> !4{2; $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def $eflags; CONSTANT: 0}
