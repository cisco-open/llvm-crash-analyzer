## This is reproducer (compiled with `clang -g -O0`):

###include <stdio.h>
## typedef struct inside_str {
##   int y;
##   int x;
## } nested_str;
## typedef struct node {
##   nested_str * val2;
## } info;
## __attribute__((noinline))
## void crash (info *node) {
##   int k = 2;
##   node->val2->x = ++k;
## }
## int main() {
##   info node;
##   node.val2 = 0;
##   crash(&node);
##   return node.val2->x + 1;
## }

# RUN: %llvm-crash-analyzer --print-potential-crash-cause-loc --core-file=%S/Inputs/core.taint-dest-base-reg --print-decompiled-mir=%t.mir %S/Inputs/taint-dest-base-reg.out < %s 2>&1 | FileCheck %s

# CHECK: Blame Function is main
# CHECK: From File {{.*}}/m.c:18:13

# RUN: cat %t.mir | FileCheck --check-prefix=CHECK-MIR %s

# CHECK-MIR: name:            crash
# CHECK-MIR: crash-start MOV32mr $rcx, 1, $noreg, 4, $noreg, $eax
## Test fails if we don't taint base-reg $rcx besides memory location $rcx + 4.

# RUN: %llvm-crash-analyzer --debug-only=taint-analysis --core-file=%S/Inputs/core.taint-dest-base-reg %S/Inputs/taint-dest-base-reg.out < %s 2>&1 | FileCheck --check-prefix=CHECK-DEBUG %s

# CHECK-DEBUG: MF: crash
# CHECK-DEBUG-EMPTY:
# CHECK-DEBUG-NEXT:   crash-start MOV32mr $rcx, 1, $noreg, 4, $noreg, $eax
## Print Destination Source Pair for the MachineInstr above.
# CHECK-DEBUG-NEXT: Dest {reg:$rcx; off:4}
# CHECK-DEBUG-NEXT: Src1 {reg:$eax}

## Add Destination (concrete memory address and base register) and Source to the Taint List.
# CHECK-DEBUG-NEXT: Add to TL: {reg:$rcx; off:4} (mem addr: 4)
## Confirm that we taint base-reg $rcx besides memory location $rcx + 4.
# CHECK-DEBUG-NEXT: Add to TL: {reg:$rcx}
## Confirm that simple register operand is not tainted.
# CHECK-DEBUG-NOT: Add to TL: {reg:$eax}
# CHECK-DEBUG-EMPTY:

## Print Taint List.
# CHECK-DEBUG-NEXT: -----Taint List Begin------
# CHECK-DEBUG-NEXT: {reg:$rcx; off:4} (mem addr: 4)
# CHECK-DEBUG-NEXT: {reg:$rcx}
# CHECK-DEBUG-NEXT: ------Taint List End----

# CHECK-DEBUG:  $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 13, column: 4, scope: !2); /nobackup/ntesic/PAC/tests/dest-base-reg/for_lit/m.c:13:4
## Print Destination Source Pair for the MachineInstr above.
# CHECK-DEBUG-NEXT: Dest {reg:$rcx}
# CHECK-DEBUG-NEXT: Src1 {reg:$rbp; off:-8}

## Add Source to the Taint List.
# CHECK-DEBUG-NEXT: Add to TL: {reg:$rbp; off:-8} (mem addr: 140734701020776)

## Remove Destination from the Taint List.
# CHECK-DEBUG-NEXT: Remove from TL: {reg:$rcx}
# CHECK-DEBUG-EMPTY:

## Print updated Taint List.
# CHECK-DEBUG-NEXT: -----Taint List Begin------
# CHECK-DEBUG-NEXT: {reg:$rcx; off:4} (mem addr: 4)
# CHECK-DEBUG-NEXT: {reg:$rbp; off:-8} (mem addr: 140734701020776)
# CHECK-DEBUG-NEXT: ------Taint List End----

## Test printed DFG format (MIR representation).
# RUN: %llvm-crash-analyzer --print-dfg-as-dot=%t1.dot --core-file=%S/Inputs/core.taint-dest-base-reg %S/Inputs/taint-dest-base-reg.out < %s
# RUN: cat %t1.dot | FileCheck --check-prefix=CHECK-DFG %s
# CHECK-DFG-NOT: {{.*}}CONSTANT: {{[0-9]+}}}"  ->

## Test printed DFG format (source code lines).
# RUN: %llvm-crash-analyzer --print-taint-value-flow-as-dot=%t2.dot --core-file=%S/Inputs/core.taint-dest-base-reg %S/Inputs/taint-dest-base-reg.out < %s
# RUN: cat %t2.dot | FileCheck --check-prefix=CHECK-TAINT-DFG %s
# CHECK-TAINT-DFG: digraph TaintDataFlowGraph {
# CHECK-TAINT-DFG-NEXT: crashNode  -> "[[TEST_FILE:[^:]*]]:13:18" [color="red"];
# CHECK-TAINT-DFG-NEXT: crashNode  -> "[[TEST_FILE]]:13:18" [color="red"];
# CHECK-TAINT-DFG-NEXT: "[[TEST_FILE]]:13:18"  -> "[[TEST_FILE]]:13:4";
# CHECK-TAINT-DFG-NEXT: "[[TEST_FILE]]:13:4"  -> "[[TEST_FILE]]:11:0";
# CHECK-TAINT-DFG-NEXT: "[[TEST_FILE]]:11:0"  -> "[[TEST_FILE]]:19:3";
# CHECK-TAINT-DFG-NEXT: "[[TEST_FILE]]:19:3"  -> "[[TEST_FILE]]:18:13" [color="red"];

## Test printed DFG format (MIR representation).
# RUN: cat %t1.dot | FileCheck --check-prefix=CHECK-DFG %s
# CHECK-DFG: digraph TaintDataFlowGraph {
# CHECK-DFG-NEXT: crashNode  ->  "{1; 1; crash-start MOV32mr $rcx, 1, $noreg, 4, $noreg, $eax;  MEM: 4}" [color="red"];
# CHECK-DFG-NEXT: crashNode  ->  "{1; 2; crash-start MOV32mr $rcx, 1, $noreg, 4, $noreg, $eax;  REG: $rcx}" [color="red"];
# CHECK-DFG-NEXT: "{1; 2; crash-start MOV32mr $rcx, 1, $noreg, 4, $noreg, $eax;  REG: $rcx}"  ->  "{1; 3; $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg;  MEM: 140734701020776}";
# CHECK-DFG-NEXT: "{1; 3; $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg;  MEM: 140734701020776}"  ->  "{1; 4; MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi;  REG: $rdi}";
# CHECK-DFG-NEXT: "{1; 4; MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi;  REG: $rdi}"  ->  "{2; 5; $rdi = LEA64r $rbp, 1, $noreg, -16, $noreg;  MEM: 140734701020800}";
# CHECK-DFG-NEXT: "{2; 5; $rdi = LEA64r $rbp, 1, $noreg, -16, $noreg;  MEM: 140734701020800}"  ->  "{2; 6; MOV64mi32 $rbp, 1, $noreg, -16, $noreg, 0;  CONSTANT: 0}" [color="red"];
